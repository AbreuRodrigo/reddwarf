/*
 * Copyright 2007 Sun Microsystems, Inc. All rights reserved
 */

package com.sun.sgs.germwar.client.gui;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

/**
 * A GermWar client GUI component that provides various buttons for controlling
 * the game.
 */
public class ControlsPanel extends JPanel {
    private static final long serialVersionUID = 1L;

    /** All of the actions that can be generated by buttons in this panel. */
    public static final String FINISH_TURN_ACTION = "done";
    public static final String ITERATE_NEXT_ACTION = "next";
    public static final String ITERATE_PREV_ACTION = "prev";
    public static final String LOGIN_ACTION = "login";
    public static final String LOGOUT_ACTION = "logout";
    
    private final JButton helpButton;
    private final JButton loginButton;
    private final JButton prevButton, nextButton;
    private final JButton finishTurnButton;
    
    // Constructor

    /**
     * Creates a new {@code ControlsPanel}.
     */
    public ControlsPanel() {
        super();
        
        helpButton = new JButton("help");
        helpButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    JOptionPane.showMessageDialog(helpButton,
                        "Key shortcuts:\n" +
                        "c - Center map\n" +
                        "d - Done\n" +
                        "m - Move\n" +
                        "w - Wait\n");
                }});

        /** text and action command vary based on user's connection state */
        loginButton = new JButton();
        loginButton.addActionListener(new LoginButtonListener());

        prevButton = ArrowButton.newInstance(SwingConstants.WEST);
        prevButton.setActionCommand(ITERATE_PREV_ACTION);

        nextButton = ArrowButton.newInstance(SwingConstants.EAST);
        nextButton.setActionCommand(ITERATE_NEXT_ACTION);

        finishTurnButton = new JButton("done");
        finishTurnButton.setActionCommand(FINISH_TURN_ACTION);
        
        setupLayout();
    }

    /**
     * Adds an {@code ActionListener} to all of the buttons in this panel.
     */
    public void addActionListener(ActionListener l) {
        loginButton.addActionListener(l);
        prevButton.addActionListener(l);
        nextButton.addActionListener(l);
        finishTurnButton.addActionListener(l);
    }

    /**
     * Removes an {@code ActionListener} from all of the buttons in this panel.
     */
    public void removeActionListener(ActionListener l) {
        loginButton.removeActionListener(l);
        prevButton.removeActionListener(l);
        nextButton.removeActionListener(l);
        finishTurnButton.removeActionListener(l);
    }

    /**
     * Modifies the layout based on whether the client is logged in.
     */
    public void setLoginState(boolean loggedIn) {
        if (loggedIn) {
            loginButton.setText("Logout");
            loginButton.setActionCommand("logout");
        } else {
            loginButton.setText("Login");
            loginButton.setActionCommand("login");
        }
        
        loginButton.setEnabled(true);
        prevButton.setEnabled(loggedIn);
        nextButton.setEnabled(loggedIn);
        finishTurnButton.setEnabled(loggedIn);
    }

    /** 
     * Sets up the layout of this panel (assumes all components have been
     * created already).
     */
    private void setupLayout() {
        setLayout(new GridLayout(1, 5));  // 1 row, 5 columns
        add(new ButtonWrapper(loginButton, 80, 30));
        add(new ButtonWrapper(prevButton, 45, 42));
        add(new ButtonWrapper(finishTurnButton, 65, 30));
        add(new ButtonWrapper(nextButton, 45, 42));
        add(new ButtonWrapper(helpButton, 70, 30));
    }

    /**
     * Inner class: LoginButtonListener
     */
    final class LoginButtonListener implements ActionListener {
        
        /**
         * Generic constructor for all button presses.
         */
        public LoginButtonListener() {
            // empty
        }
        
        // Implement ActionListener
        
        /**
         * {@inheritDoc}
         */
        public void actionPerformed(ActionEvent action) {
            final String command = action.getActionCommand();
            
            if (command.equals(LOGIN_ACTION)) {
                /** Disable login button until login succeeds or fails. */
                loginButton.setEnabled(false);
            }
        }
    }
}
