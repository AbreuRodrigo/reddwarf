<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.projectdarkstar</groupId>
  <artifactId>sgs</artifactId>
  <name>Project Darkstar Master POM</name>
  <packaging>pom</packaging>
  <version>15</version>
  <url>http://www.projectdarkstar.com</url>
  <description>
    This is the super POM inherited by all sgs modules
    It defines settings common to all projects
  </description>

  <!-- Require at least Maven version 2.0.9 to build -->
  <prerequisites>
    <maven>2.0.9</maven>
  </prerequisites>

  <build>

    <!-- This section defines global configuration of plugins
	 These plugin settings are not activated in child projects
	 unless the plugin is explicitly used -->
    <pluginManagement>

      <plugins>
	
	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-antrun-plugin</artifactId>
	  <version>${maven-antrun-plugin.version}</version>
	</plugin>

	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-assembly-plugin</artifactId>
	  <version>${maven-assembly-plugin.version}</version>
	</plugin>

	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-clean-plugin</artifactId>
	  <version>${maven-clean-plugin.version}</version>
	</plugin>

	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-compiler-plugin</artifactId>
	  <version>${maven-compiler-plugin.version}</version>
	</plugin>

	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-dependency-plugin</artifactId>
	  <version>${maven-dependency-plugin.version}</version>
	</plugin>

	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-deploy-plugin</artifactId>
	  <version>${maven-deploy-plugin.version}</version>
	</plugin>

	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-enforcer-plugin</artifactId>
	  <version>${maven-enforcer-plugin.version}</version>
	</plugin>

	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-install-plugin</artifactId>
	  <version>${maven-install-plugin.version}</version>
	</plugin>

	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-jar-plugin</artifactId>
	  <version>${maven-jar-plugin.version}</version>
	</plugin>

	<!-- A javadoc jar can be attached by enabling
	     the attach-javadocs execution id of this plugin -->
	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-javadoc-plugin</artifactId>
	  <version>${maven-javadoc-plugin.version}</version>
	  <configuration>
            <links>
              <link>http://java.sun.com/j2se/1.5.0/docs/api/</link>
            </links>
          </configuration>
	  <executions>
	    <execution>
	      <id>attach-javadocs</id>
	      <goals>
		<goal>jar</goal>
	      </goals>
	      <configuration>
		<quiet>true</quiet>
	      </configuration>
	    </execution>
	  </executions>
	</plugin>

	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-project-info-reports-plugin</artifactId>
	  <version>${maven-project-info-reports-plugin.version}</version>
	</plugin>

	<!-- The resource bundle executions should be activated in modules
	     that produce jars that require the license to be bundled
	     in the jar -->
	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-remote-resources-plugin</artifactId>
	  <version>${maven-remote-resources-plugin.version}</version>
	  <configuration>
	    <properties>
	      <projectYear>${projectYear}</projectYear>
	    </properties>
	  </configuration>
	  <executions>
	    <execution>
	      <id>include-gpl-license</id>
	      <goals>
		<goal>process</goal>
	      </goals>
	      <phase></phase>
	      <configuration>
		<resourceBundles>
		  <resourceBundle>com.projectdarkstar.tools.build:sgs-jar-resources-gpl:${sgs-jar-resources-gpl.version}</resourceBundle>
		</resourceBundles>
	      </configuration>
	    </execution>
	    <execution>
	      <id>include-gpl-classpath-license</id>
	      <goals>
		<goal>process</goal>
	      </goals>
	      <phase></phase>
	      <configuration>
		<resourceBundles>
		  <resourceBundle>com.projectdarkstar.tools.build:sgs-jar-resources-gpl-classpath:${sgs-jar-resources-gpl-classpath.version}</resourceBundle>
		</resourceBundles>
	      </configuration>
	    </execution>
	    <execution>
	      <id>include-bsd-license</id>
	      <goals>
		<goal>process</goal>
	      </goals>
	      <phase></phase>
	      <configuration>
		<resourceBundles>
		  <resourceBundle>com.projectdarkstar.tools.build:sgs-jar-resources-bsd:${sgs-jar-resources-bsd.version}</resourceBundle>
		</resourceBundles>
	      </configuration>
	    </execution>
	  </executions>
	</plugin>

	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-resources-plugin</artifactId>
	  <version>${maven-resources-plugin.version}</version>
	</plugin>

	<plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
	  <version>${maven-shade-plugin.version}</version>
	</plugin>

	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-site-plugin</artifactId>
	  <version>${maven-site-plugin.version}</version>
	</plugin>

	<!-- A sources jar can be attached by enabling
	     the attach-sources execution id of this plugin -->
	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-source-plugin</artifactId>
	  <version>${maven-source-plugin.version}</version>
	  <executions>
	    <execution>
	      <id>attach-sources</id>
	      <goals>
		<goal>jar</goal>
	      </goals>
	    </execution>
	  </executions>
	</plugin>

	<!-- Default configuration for running unit tests -->
	<plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
	  <version>${maven-surefire-plugin.version}</version>
          <configuration>
            <includes>
              <include>**/Test*.java</include>
            </includes>
	    <forkMode>always</forkMode>
	    <failIfNoTests>false</failIfNoTests>
	    <argLine>${test.jvm.args}</argLine>
	    <redirectTestOutputToFile>${test.output.hide}</redirectTestOutputToFile>
          </configuration>
	</plugin>


	<!-- The license plugin should be activated in modules that
	     wish to verify correct headers are included in every source file.
	     This should be used in conjunction with the remote-resources
	     plugin above as it checks that the header for each source
	     file is equal to either the LICENSE or NOTICE file pulled
	     over by the remote-resources plugin -->
	<plugin>
	  <groupId>com.google.code.maven-license-plugin</groupId>
          <artifactId>maven-license-plugin</artifactId>
          <version>${maven-license-plugin.version}</version>
	  <executions>
	    <execution>
	      <id>check-notice</id>
	      <goals>
		<goal>check</goal>
	      </goals>
	      <phase></phase>
	      <configuration>
		<header>${basedir}/target/classes/META-INF/NOTICE</header>
		<includes>
		  <include>**/*.java</include>
		</includes>
	      </configuration>
	    </execution>
	    <execution>
	      <id>check-license</id>
	      <goals>
		<goal>check</goal>
	      </goals>
	      <phase></phase>
	      <configuration>
		<header>${basedir}/target/classes/META-INF/LICENSE</header>
		<includes>
		  <include>**/*.java</include>
		</includes>
	      </configuration>
	    </execution>
	  </executions>
	</plugin>

	<plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
	  <version>${build-helper-maven-plugin.version}</version>
	</plugin>

	<plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>buildnumber-maven-plugin</artifactId>
	  <version>${buildnumber-maven-plugin.version}</version>
	</plugin>
	
      </plugins>
      
    </pluginManagement>

    <!-- This section enables plugins globally for all child projects
	 Any project inheriting from this POM will have these plugins
	 enabled and configured as shown unless they override those
	 settings -->
    <plugins>
      
      <!-- Global compiler configuration -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-compiler-plugin</artifactId>
	<configuration>
	  <compilerArgument>-Xlint</compilerArgument>
	  <source>1.5</source>
	  <target>1.5</target>
	</configuration>
      </plugin>

      <!-- Global manifest generation configuration -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifest>
	      <addClasspath>true</addClasspath>
              <addDefaultImplementationEntries>
		true
	      </addDefaultImplementationEntries>
              <addDefaultSpecificationEntries>
		true
	      </addDefaultSpecificationEntries>
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <!-- Configure checkstyle to have custom dependency -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
	<version>${maven-checkstyle-plugin.version}</version>
	<dependencies>
	  <dependency>
	    <groupId>com.projectdarkstar.tools.build</groupId>
	    <artifactId>sgs-build-utilities</artifactId>
	    <version>${sgs-build-utilities.version}</version>
	  </dependency>
	</dependencies>
      </plugin>

      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-enforcer-plugin</artifactId>
	<executions>
          <execution>
            <id>enforce-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
	    <configuration>
	      <rules>
		<requireMavenVersion>
		  <version>2.0.9</version>
		</requireMavenVersion>
		<requirePluginVersions>
		  <message>Always define plugin version numbers!</message>
		</requirePluginVersions>
	      </rules>
	    </configuration>
	  </execution>
	</executions>
      </plugin>

    </plugins>

    <!-- Include the wagon-svn extension so we can deploy
	 to Maven2 repositories hosted in SVN repositories
	 on java.net -->
    <extensions>
      <extension>
        <groupId>org.jvnet.wagon-svn</groupId>
        <artifactId>wagon-svn</artifactId>
        <version>${wagon-svn.version}</version>
      </extension>
    </extensions>

  </build>

  <reporting>
    <plugins>
      
      <!-- Configure checkstyle to run during site lifecycle -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
	<version>${maven-checkstyle-plugin.version}</version>
	<configuration>
	  <linkXRef>false</linkXRef>
	  <consoleOutput>true</consoleOutput>
	  <enableRulesSummary>false</enableRulesSummary>
	  <configLocation>${checkstyle.config}</configLocation>
	  <packageNamesLocation>
	    ${checkstyle.packageNames}
	  </packageNamesLocation>
	  <propertyExpansion>
	    checkstyle.unusedImports=${checkstyle.unusedImports}
	  </propertyExpansion>
        </configuration>
      </plugin>

      <!-- Configure findbugs to run during site lifecycle -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
	<version>${findbugs-maven-plugin.version}</version>
	<configuration>
	  <effort>Max</effort>
	  <threshold>Low</threshold>
	  <xmlOutput>true</xmlOutput>
	  <findbugsXmlOutput>true</findbugsXmlOutput>
	  <findbugsXmlWithMessages>true</findbugsXmlWithMessages>
	</configuration>
      </plugin>

    </plugins>
  </reporting>


  <!-- Library of dependencies used in any sub module of this project
       Define versions of dependencies in this file only to maintain
       consistency -->
  <dependencyManagement>
    <dependencies>
      <dependency>
	<groupId>junit</groupId>
	<artifactId>junit</artifactId>
	<version>${junit.version}</version>
	<scope>test</scope>
      </dependency>
      <dependency>
	<groupId>org.easymock</groupId>
	<artifactId>easymock</artifactId>
	<version>${easymock.version}</version>
	<scope>test</scope>
      </dependency>

      <!-- for the sgs-build-utilities -->
      <dependency>
	<groupId>checkstyle</groupId>
	<artifactId>checkstyle</artifactId>
	<version>${checkstyle.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <!-- Release artifacts should be deployed to the java.net
       Maven2 repository
       SNAPSHOT artifacts should be deployed to the
       repository hosted in the games-darkstar java.net project -->
  <distributionManagement>
    <repository>
      <id>java.net-maven2-repository</id>
      <name>java.net Maven2 Repository</name>
      <url>java-net:/maven2-repository/trunk/repository/</url>
    </repository>
    <snapshotRepository>
      <id>games-darkstar-snapshot-repository</id>
      <name>games-darkstar SNAPSHOT Repository</name>
      <url>java-net:/games-darkstar/trunk/www/snapshots/</url>
      <uniqueVersion>false</uniqueVersion>
    </snapshotRepository>
  </distributionManagement>

  <!-- Include the java.net repository to retrieve dependent
       artifacts (such as wagon-svn) -->
  <repositories>
    <repository>
      <id>java.net</id>
      <name>java.net Maven2 Repository</name>
      <url>http://download.java.net/maven/2/</url>
      <layout>default</layout>
    </repository>
    <repository>
      <id>oracle</id>
      <name>Oracle Maven2 Repository</name>
      <url>http://download.oracle.com/maven</url>
      <layout>default</layout>
    </repository>
  </repositories>
  
  <!-- Configuration properties which should be consistent
       across all children POMS -->
  <properties>
    
    <projectYear>2009</projectYear>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    
    <sgs-build-utilities.version>1.1</sgs-build-utilities.version>
    <sgs-jar-resources-gpl.version>1.1</sgs-jar-resources-gpl.version>
    <sgs-jar-resources-gpl-classpath.version>1.0</sgs-jar-resources-gpl-classpath.version>
    <sgs-jar-resources-bsd.version>1.1</sgs-jar-resources-bsd.version>

    <maven-antrun-plugin.version>1.3</maven-antrun-plugin.version>
    <maven-assembly-plugin.version>2.2-beta-2</maven-assembly-plugin.version>
    <maven-clean-plugin.version>2.3</maven-clean-plugin.version>
    <maven-compiler-plugin.version>2.0.2</maven-compiler-plugin.version>
    <maven-dependency-plugin.version>2.1</maven-dependency-plugin.version>
    <maven-deploy-plugin.version>2.4</maven-deploy-plugin.version>
    <maven-enforcer-plugin.version>1.0-beta-1</maven-enforcer-plugin.version>
    <maven-install-plugin.version>2.3</maven-install-plugin.version>
    <maven-jar-plugin.version>2.2</maven-jar-plugin.version>
    <maven-javadoc-plugin.version>2.5</maven-javadoc-plugin.version>
    <maven-project-info-reports-plugin.version>2.1.1</maven-project-info-reports-plugin.version>
    <maven-remote-resources-plugin.version>1.0</maven-remote-resources-plugin.version>
    <maven-resources-plugin.version>2.3</maven-resources-plugin.version>
    <maven-shade-plugin.version>1.2.1</maven-shade-plugin.version>
    <maven-site-plugin.version>2.0</maven-site-plugin.version>
    <maven-source-plugin.version>2.1</maven-source-plugin.version>
    <maven-surefire-plugin.version>2.4.3</maven-surefire-plugin.version>

    <maven-license-plugin.version>1.4.0</maven-license-plugin.version>

    <build-helper-maven-plugin.version>1.3</build-helper-maven-plugin.version>
    <buildnumber-maven-plugin.version>1.0-beta-2</buildnumber-maven-plugin.version>

    <maven-checkstyle-plugin.version>2.2</maven-checkstyle-plugin.version>
    <findbugs-maven-plugin.version>2.0.1</findbugs-maven-plugin.version>

    <junit.version>4.5</junit.version>
    <easymock.version>2.4</easymock.version>
    <wagon-svn.version>1.9</wagon-svn.version>

    <checkstyle.version>4.4</checkstyle.version>
    <!-- Locations of checkstyle files
	 Configure these in the individual modules that use the
	 checkstyle plugin -->
    <checkstyle.config>
      com/sun/sgs/tools/checkstyle/darkstar_checks.xml
    </checkstyle.config>
    <checkstyle.packageNames>
      com/sun/sgs/tools/checkstyle/packageNames.xml
    </checkstyle.packageNames>
    <!-- Checkstyle report level for unused imports
	 You can enable the unused imports check by setting the value
	 to warning. -->
    <checkstyle.unusedImports>ignore</checkstyle.unusedImports>

    <test.assertions>-ea:com.sun.sgs...</test.assertions>
    <test.max.heap>-Xmx1g</test.max.heap>
    <test.jvm.args>${test.assertions} ${test.max.heap}</test.jvm.args>
    <test.output.hide>true</test.output.hide>
    <test.bdb.cache.size>1000000</test.bdb.cache.size>

  </properties>

</project>
