#!/usr/bin/ruby -w

require 'rexml/document'
require 'rexml/streamlistener'

include REXML

filename = ARGV.shift
file = File.new(filename)

class Listener

  include StreamListener

  attr_reader :records

  def initialize
    @currentRecord = nil
    @currentField = nil
    @currentSeq = 0
  end

  def tag_start(name, attributes)
    #puts "Start #{name}"
    case name
    when "log"
      @records = Hash.new
    when "record"
      @currentRecord = Hash.new
    else
      @currentField = name
    end
  end

  def text(txt)
    return if @currentRecord.nil?
    return if @currentField.nil?
    @currentRecord[@currentField.to_sym] = txt
    if @currentField == "sequence" then
      newSeq = txt.to_i
      if newSeq < @currentSeq then
	$stderr.puts "out-of-order " + newSeq.to_s + " < " + @currentSeq.to_s
      end
      @currentSeq = newSeq
    end
    @currentField = nil
  end

  def tag_end(name)
    #puts "End #{name}"
    case name
    when "record"
      @records[@currentSeq] = @currentRecord.dup
      @currentRecord = nil
    when "log"
      writeRecords
    else
      return
    end
  end

  def writeRecords
    # Time to write what we got
    @records.keys.sort.each do |seq|
      rec = records[seq]
      puts "(#{rec[:millis]}|#{rec[:thread]}) #{rec[:level]} #{rec[:method]}: #{rec[:message]}"
    end
    records.clear
  end
end

listener = Listener.new
parser = Parsers::StreamParser.new(file, listener)
parser.parse

