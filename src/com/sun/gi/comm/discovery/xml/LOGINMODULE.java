/**
 * The file is generated by BorlandXML.
 */

package com.sun.gi.comm.discovery.xml;

/**
 * The LOGINMODULE class represents the element "LOGINMODULE" with the content
 * model defined as follows:
 * <p>
 * &lt;!ELEMENT LOGINMODULE EMPTY&gt;<br>
 */
public class LOGINMODULE extends com.borland.xml.toolkit.EmptyElement 
{
	/** element-type name of this element. */
	public static String _tagName = "LOGINMODULE";
	/** Defines a classname attribute */
	public com.borland.xml.toolkit.Attribute classname = new com.borland.xml.toolkit.Attribute("classname", "NMTOKEN", "REQUIRED", "");

	/**
	 * Creates an empty LOGINMODULE object.
	 */
	public LOGINMODULE()
	{
		super();
	}

	/**
	 * Creates a LOGINMODULE object with the specified state.
	 * @param state	boolean value
	 */
	public LOGINMODULE(boolean state)
	{
		super(state);
	}

	/**
	 * Gets the value of "classname" attribute.
	 */
	public String getClassname()
	{
		return classname.getValue();
	}

	/**
	 * Replaces the existing attribute value with a new value.
	 * @param value	New value.
	 */
	public void setClassname(String value_)
	{
		classname.setValue(value_ );
	}

	/**
	 * Marshals this object to an element.
	 */
	public com.borland.xml.toolkit.Element marshal()
	{
		com.borland.xml.toolkit.Element elem = super.marshal();
		/** Marshals "classname" attribute */
		elem.addAttribute(classname.marshal());
		return elem;
	}

	/**
	 * Unmarshals the specified "LOGINMODULE" element back to a LOGINMODULE object.
	 */
	public static LOGINMODULE unmarshal(com.borland.xml.toolkit.Element elem)
	{
		LOGINMODULE __objLOGINMODULE = (LOGINMODULE)com.borland.xml.toolkit.EmptyElement.unmarshal(elem, new LOGINMODULE());
		if( __objLOGINMODULE != null ) //found the element?
		{
			/** Unmarshals "classname" attribute */
			__objLOGINMODULE.classname.setValue(elem.getAttribute("classname"));
		}
		return __objLOGINMODULE;
	}

	/**
	 * Validates this object. If you pass <code>true</code> to this method, it
	 * checks for the first error and stops. On the other hand, if you pass
	 * <code>false</code> to this method, it collects all the errors by
	 * visiting every available elements.
	 * @param firstError	<code>true</code> to exit this method when the first error
	 * is found; <code>false</code> to collect all errors.
	 * @return com.borland.xml.toolkit.ErrorList	A list that contains one or more errors.
	 * @see com.borland.xml.toolkit.XmlObject#validate()
	 * @see com.borland.xml.toolkit.XmlObject#isValid()
	 * @see com.borland.xml.toolkit.ErrorList
	 */
	public com.borland.xml.toolkit.ErrorList validate(boolean firstError)
	{
		com.borland.xml.toolkit.ErrorList errors = new com.borland.xml.toolkit.ErrorList();


		return errors.size()==0 ? null : errors;
	}


	/**
	 * Gets the element-type name.
	 */
	public String get_TagName()
	{
		return _tagName;
	}
}
