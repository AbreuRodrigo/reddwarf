/**
 * The file is generated by BorlandXML.
 */

package com.sun.gi.comm.discovery.xml;

/**
 * The PARAMETER class represents the element "PARAMETER" with the content
 * model defined as follows:
 * <p>
 * &lt;!ELEMENT PARAMETER EMPTY&gt;<br>
 */
public class PARAMETER extends com.borland.xml.toolkit.EmptyElement 
{
	/** element-type name of this element. */
	public static String _tagName = "PARAMETER";
	/** Defines a tag attribute */
	public com.borland.xml.toolkit.Attribute tag = new com.borland.xml.toolkit.Attribute("tag", "NMTOKEN", "REQUIRED", "");
	/** Defines a value attribute */
	public com.borland.xml.toolkit.Attribute value = new com.borland.xml.toolkit.Attribute("value", "NMTOKEN", "REQUIRED", "");

	/**
	 * Creates an empty PARAMETER object.
	 */
	public PARAMETER()
	{
		super();
	}

	/**
	 * Creates a PARAMETER object with the specified state.
	 * @param state	boolean value
	 */
	public PARAMETER(boolean state)
	{
		super(state);
	}

	/**
	 * Gets the value of "tag" attribute.
	 */
	public String getTag()
	{
		return tag.getValue();
	}

	/**
	 * Replaces the existing attribute value with a new value.
	 * @param value	New value.
	 */
	public void setTag(String value_)
	{
		tag.setValue(value_ );
	}

	/**
	 * Gets the value of "value" attribute.
	 */
	public String getValue()
	{
		return value.getValue();
	}

	/**
	 * Replaces the existing attribute value with a new value.
	 * @param value	New value.
	 */
	public void setValue(String value_)
	{
		value.setValue(value_ );
	}

	/**
	 * Marshals this object to an element.
	 */
	public com.borland.xml.toolkit.Element marshal()
	{
		com.borland.xml.toolkit.Element elem = super.marshal();
		/** Marshals "tag" attribute */
		elem.addAttribute(tag.marshal());
		/** Marshals "value" attribute */
		elem.addAttribute(value.marshal());
		return elem;
	}

	/**
	 * Unmarshals the specified "PARAMETER" element back to a PARAMETER object.
	 */
	public static PARAMETER unmarshal(com.borland.xml.toolkit.Element elem)
	{
		PARAMETER __objPARAMETER = (PARAMETER)com.borland.xml.toolkit.EmptyElement.unmarshal(elem, new PARAMETER());
		if( __objPARAMETER != null ) //found the element?
		{
			/** Unmarshals "tag" attribute */
			__objPARAMETER.tag.setValue(elem.getAttribute("tag"));
			/** Unmarshals "value" attribute */
			__objPARAMETER.value.setValue(elem.getAttribute("value"));
		}
		return __objPARAMETER;
	}

	/**
	 * Validates this object. If you pass <code>true</code> to this method, it
	 * checks for the first error and stops. On the other hand, if you pass
	 * <code>false</code> to this method, it collects all the errors by
	 * visiting every available elements.
	 * @param firstError	<code>true</code> to exit this method when the first error
	 * is found; <code>false</code> to collect all errors.
	 * @return com.borland.xml.toolkit.ErrorList	A list that contains one or more errors.
	 * @see com.borland.xml.toolkit.XmlObject#validate()
	 * @see com.borland.xml.toolkit.XmlObject#isValid()
	 * @see com.borland.xml.toolkit.ErrorList
	 */
	public com.borland.xml.toolkit.ErrorList validate(boolean firstError)
	{
		com.borland.xml.toolkit.ErrorList errors = new com.borland.xml.toolkit.ErrorList();


		return errors.size()==0 ? null : errors;
	}


	/**
	 * Gets the element-type name.
	 */
	public String get_TagName()
	{
		return _tagName;
	}
}
