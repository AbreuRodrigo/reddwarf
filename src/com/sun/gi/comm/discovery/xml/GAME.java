/**
 * This file is generated by BorlandXML.
 */

package com.sun.gi.comm.discovery.xml;

import java.util.*;

/**
 * The GAME class represents the element "GAME" with the content
 * model defined as follows:
 * <p>
 * &lt;!ELEMENT GAME (USERMANAGER)+&gt;<br>
 */
public class GAME extends com.borland.xml.toolkit.XmlObject 
{
	/** element-type name of this element. */
	public static String _tagName = "GAME";
	/** Defines a name attribute */
	public com.borland.xml.toolkit.Attribute name = new com.borland.xml.toolkit.Attribute("name", "NMTOKEN", "REQUIRED", "");
	/** Defines a id attribute */
	public com.borland.xml.toolkit.Attribute id = new com.borland.xml.toolkit.Attribute("id", "NMTOKEN", "REQUIRED", "");
	/** Defines a list of USERMANAGER objects. */
	protected ArrayList _objUSERMANAGER = new ArrayList();

	/**
	 * Creates an empty GAME object
	 */
	public GAME()
	{
		super();
	}

	/**
	 * Gets the value of "name" attribute.
	 */
	public String getName()
	{
		return name.getValue();
	}

	/**
	 * Replaces the existing attribute value with a new value.
	 * @param value	New value.
	 */
	public void setName(String value_)
	{
		name.setValue(value_ );
	}

	/**
	 * Gets the value of "id" attribute.
	 */
	public String getId()
	{
		return id.getValue();
	}

	/**
	 * Replaces the existing attribute value with a new value.
	 * @param value	New value.
	 */
	public void setId(String value_)
	{
		id.setValue(value_ );
	}

	/**
	 * Returns an array of USERMANAGER objects. The length of the returned
	 * array is zero if the list of USERMANAGER object is empty.
	 */
	public USERMANAGER[] getUSERMANAGER()
	{
		return (USERMANAGER[])_objUSERMANAGER.toArray(new USERMANAGER[0]);
	}

	/**
	 * Replaces all existing USERMANAGER objects with a new array of
	 * USERMANAGER objects.
	 * @param objArray	an array of USERMANAGER objects.
	 */
	public void setUSERMANAGER(USERMANAGER[] objArray)
	{
		if( objArray == null || objArray.length == 0 )
			this._objUSERMANAGER.clear();
		else
		{
			this._objUSERMANAGER = new ArrayList(Arrays.asList(objArray));
			for( int i=0; i<objArray.length; i++ )
			{
				if( objArray[i] != null )
					objArray[i]._setParent(this);
			}
		}
	}

	/**
	 * Gets the USERMANAGER object at the specified index.
	 * @param index	index of the returned object.
	 * @throws IndexOutOfBoundsException	if index is out of range.
	 */
	public USERMANAGER getUSERMANAGER(int index)
	{
		return (USERMANAGER)_objUSERMANAGER.get(index);
	}

	/**
	 * Replaces an existing USERMANAGER object at the specified index with
	 * a new USERMANAGER object.
	 * @param index	index of replaced object.
	 * @throws IndexOutOfBoundsException	if index is out of range.
	 */
	public void setUSERMANAGER(int index, USERMANAGER obj)
	{
		if( obj == null )
			removeUSERMANAGER(index);
		else
		{
			_objUSERMANAGER.set(index, obj);
			obj._setParent(this);
		}
	}

	/**
	 * Returns the number of USERMANAGER objects in the list.
	 */
	public int getUSERMANAGERCount()
	{
		return _objUSERMANAGER.size();
	}

	/**
	 * Returns <code>true</code> if there is no USERMANAGER object in the list; otherwise,
	 * the method returns <code>false</code>.
	 */
	public boolean isNoUSERMANAGER()
	{
		return _objUSERMANAGER.size() == 0;
	}

	/**
	 * Returns a read-only list of USERMANAGER objects.
	 */
	public List getUSERMANAGERList()
	{
		return Collections.unmodifiableList(_objUSERMANAGER);
	}

	/**
	 * Adds a new USERMANAGER object at the end of the list.
	 * @return <code>true</code> if the new object is added to the list; otherwise,
	 * the method returns <code>false</code>.
	 */
	public boolean addUSERMANAGER(USERMANAGER obj)
	{
		if( obj==null )
			return false;

		obj._setParent(this);
		return _objUSERMANAGER.add(obj);
	}

	/**
	 * Adds a list of new USERMANAGER objects at the end of the list.
	 * @return <code>true</code> if the list was changed; otherwise, the method
	 * returns <code>false</code>.
	 */
	public boolean addUSERMANAGER(Collection coUSERMANAGER)
	{
		if( coUSERMANAGER==null )
			return false;

		java.util.Iterator it = coUSERMANAGER.iterator();
		while( it.hasNext() )
		{
			Object obj = it.next();
			if( obj != null && obj instanceof com.borland.xml.toolkit.XmlObject )
				((com.borland.xml.toolkit.XmlObject)obj)._setParent(this);
		}
		return _objUSERMANAGER.addAll(coUSERMANAGER);
	}

	/**
	 * Removes an existing USERMANAGER object at the specified index.
	 * @return	The removed object.
	 */
	public USERMANAGER removeUSERMANAGER(int index)
	{
		return (USERMANAGER)_objUSERMANAGER.remove(index);
	}

	/**
	 * Removes the specified USERMANAGER object.
	 * @return <code>true</code> if this list contains the object; otherwise,
	 * the method returns <code>false</code>.
	 */
	public boolean removeUSERMANAGER(USERMANAGER obj)
	{
		return _objUSERMANAGER.remove(obj);
	}

	/**
	 * Clears all USERMANAGER objects from the list.
	 */
	public void clearUSERMANAGERList()
	{
		_objUSERMANAGER.clear();
	}

	/**
	 * Marshals this object to an element.
	 */
	public com.borland.xml.toolkit.Element marshal()
	{
		com.borland.xml.toolkit.Element elem = new com.borland.xml.toolkit.Element(get_TagName());
		/** Marshals "name" attribute */
		elem.addAttribute(name.marshal());
		/** Marshals "id" attribute */
		elem.addAttribute(id.marshal());
		/** Marshals a list of USERMANAGER objects to elements */
		Iterator it1 = _objUSERMANAGER.iterator();
		while( it1.hasNext() )
		{
			USERMANAGER obj = (USERMANAGER)it1.next();
			if( obj != null )
			{
				elem.addComment(obj._marshalCommentList());
				elem.addContent(obj.marshal());
			}
		}

		elem.addComment(this._marshalBottomCommentList());
		return elem;
	}

	/**
	 * Unmarshals the specified "GAME" element back to a GAME object.
	 */
	public static GAME unmarshal(com.borland.xml.toolkit.Element elem)
	{
		if( elem == null )
			return null;

		GAME __objGAME = new GAME();
		if( __objGAME != null ) //found the element?
		{
			/** Unmarshals "name" attribute */
			__objGAME.name.setValue(elem.getAttribute("name"));
			/** Unmarshals "id" attribute */
			__objGAME.id.setValue(elem.getAttribute("id"));
		}

		ArrayList __comments = null;
		Iterator it = elem.getChildObjects().iterator();
		while( it.hasNext() )
		{
		    Object __obj = it.next();
			if( __obj instanceof com.borland.xml.toolkit.Comment )
			{
				if( __comments == null )
					__comments = new ArrayList(2);

				__comments.add(__obj);
			}
			else if( __obj instanceof com.borland.xml.toolkit.Element )
			{
				com.borland.xml.toolkit.Element __e = (com.borland.xml.toolkit.Element)__obj;
			    String __name = __e.getName();
			    if( __name.equals(USERMANAGER._tagName) )
				{
					/** Unmarshals the child element back to a USERMANAGER object */
					USERMANAGER __objUSERMANAGER = USERMANAGER.unmarshal(__e);
					__objGAME.addUSERMANAGER(__objUSERMANAGER);
					__objUSERMANAGER._unmarshalCommentList(__comments);
				}

				__comments = null;
			}
		}
		__objGAME._unmarshalBottomCommentList(__comments);
		return __objGAME;
	}

	/**
	 * Validates this object. If you pass <code>true</code> to this method, it
	 * checks for the first error and stops. On the other hand, if you pass
	 * <code>false</code> to this method, it collects all the errors by
	 * visiting every available elements.
	 * @param firstError	<code>true</code> to exit this method when the first error
	 * is found; <code>false</code> to collect all errors.
	 * @return com.borland.xml.toolkit.ErrorList	A list that contains one or more errors.
	 * @see com.borland.xml.toolkit.XmlObject#validate()
	 * @see com.borland.xml.toolkit.XmlObject#isValid()
	 * @see com.borland.xml.toolkit.ErrorList
	 */
	public com.borland.xml.toolkit.ErrorList validate(boolean firstError)
	{
		com.borland.xml.toolkit.ErrorList errors = new com.borland.xml.toolkit.ErrorList();

		/** USERMANAGER is one or more */
		if( _objUSERMANAGER.size() == 0 )
		{
			errors.add(new com.borland.xml.toolkit.ElementError(this, USERMANAGER.class));
			if( firstError )
				return errors;
		}
		else
		{
			Iterator it1 = _objUSERMANAGER.iterator();
			while( it1.hasNext() )
			{
				USERMANAGER obj = (USERMANAGER)it1.next();
				if( obj != null )
				{
					errors.add(obj.validate(firstError));
					if( firstError && errors.size() > 0 )
						return errors;
				}
			}
		}

		return errors.size()==0 ? null : errors;
	}

	/**
	 * Returns a list containing all child elements. Each element in the list is a subclass
	 * of XmlObject.
	 */
	public java.util.List _getChildren()
	{
		java.util.List children = new java.util.ArrayList();
		/** adds _objUSERMANAGER */
		if( _objUSERMANAGER != null && _objUSERMANAGER.size() > 0 )
			children.add(_objUSERMANAGER);
		return children;
	}


	/**
	 * Gets the element-type name.
	 */
	public String get_TagName()
	{
		return _tagName;
	}
}
