/**
 * This file is generated by BorlandXML.
 */

package com.sun.gi.framework.install.xml;

import java.util.*;

/**
 * The USERMANAGER class represents the element "USERMANAGER" with the content
 * model defined as follows:
 * <p>
 * &lt;!ELEMENT USERMANAGER (PARAMETER*,LOGINMODULE*)&gt;<br>
 */
public class USERMANAGER extends com.borland.xml.toolkit.XmlObject 
{
	/** element-type name of this element. */
	public static String _tagName = "USERMANAGER";
	/** Defines a serverclass attribute */
	public com.borland.xml.toolkit.Attribute serverclass = new com.borland.xml.toolkit.Attribute("serverclass", "NMTOKEN", "REQUIRED", "");
	/** Defines a list of PARAMETER objects. */
	protected ArrayList _objPARAMETER = new ArrayList();
	/** Defines a list of LOGINMODULE objects. */
	protected ArrayList _objLOGINMODULE = new ArrayList();

	/**
	 * Creates an empty USERMANAGER object
	 */
	public USERMANAGER()
	{
		super();
	}

	/**
	 * Gets the value of "serverclass" attribute.
	 */
	public String getServerclass()
	{
		return serverclass.getValue();
	}

	/**
	 * Replaces the existing attribute value with a new value.
	 * @param value	New value.
	 */
	public void setServerclass(String value_)
	{
		serverclass.setValue(value_ );
	}

	/**
	 * Returns an array of PARAMETER objects. The length of the returned
	 * array is zero if the list of PARAMETER object is empty.
	 */
	public PARAMETER[] getPARAMETER()
	{
		return (PARAMETER[])_objPARAMETER.toArray(new PARAMETER[0]);
	}

	/**
	 * Replaces all existing PARAMETER objects with a new array of
	 * PARAMETER objects.
	 * @param objArray	an array of PARAMETER objects.
	 */
	public void setPARAMETER(PARAMETER[] objArray)
	{
		if( objArray == null || objArray.length == 0 )
			this._objPARAMETER.clear();
		else
		{
			this._objPARAMETER = new ArrayList(Arrays.asList(objArray));
			for( int i=0; i<objArray.length; i++ )
			{
				if( objArray[i] != null )
					objArray[i]._setParent(this);
			}
		}
	}

	/**
	 * Gets the PARAMETER object at the specified index.
	 * @param index	index of the returned object.
	 * @throws IndexOutOfBoundsException	if index is out of range.
	 */
	public PARAMETER getPARAMETER(int index)
	{
		return (PARAMETER)_objPARAMETER.get(index);
	}

	/**
	 * Replaces an existing PARAMETER object at the specified index with
	 * a new PARAMETER object.
	 * @param index	index of replaced object.
	 * @throws IndexOutOfBoundsException	if index is out of range.
	 */
	public void setPARAMETER(int index, PARAMETER obj)
	{
		if( obj == null )
			removePARAMETER(index);
		else
		{
			_objPARAMETER.set(index, obj);
			obj._setParent(this);
		}
	}

	/**
	 * Returns the number of PARAMETER objects in the list.
	 */
	public int getPARAMETERCount()
	{
		return _objPARAMETER.size();
	}

	/**
	 * Returns <code>true</code> if there is no PARAMETER object in the list; otherwise,
	 * the method returns <code>false</code>.
	 */
	public boolean isNoPARAMETER()
	{
		return _objPARAMETER.size() == 0;
	}

	/**
	 * Returns a read-only list of PARAMETER objects.
	 */
	public List getPARAMETERList()
	{
		return Collections.unmodifiableList(_objPARAMETER);
	}

	/**
	 * Adds a new PARAMETER object at the end of the list.
	 * @return <code>true</code> if the new object is added to the list; otherwise,
	 * the method returns <code>false</code>.
	 */
	public boolean addPARAMETER(PARAMETER obj)
	{
		if( obj==null )
			return false;

		obj._setParent(this);
		return _objPARAMETER.add(obj);
	}

	/**
	 * Adds a list of new PARAMETER objects at the end of the list.
	 * @return <code>true</code> if the list was changed; otherwise, the method
	 * returns <code>false</code>.
	 */
	public boolean addPARAMETER(Collection coPARAMETER)
	{
		if( coPARAMETER==null )
			return false;

		java.util.Iterator it = coPARAMETER.iterator();
		while( it.hasNext() )
		{
			Object obj = it.next();
			if( obj != null && obj instanceof com.borland.xml.toolkit.XmlObject )
				((com.borland.xml.toolkit.XmlObject)obj)._setParent(this);
		}
		return _objPARAMETER.addAll(coPARAMETER);
	}

	/**
	 * Removes an existing PARAMETER object at the specified index.
	 * @return	The removed object.
	 */
	public PARAMETER removePARAMETER(int index)
	{
		return (PARAMETER)_objPARAMETER.remove(index);
	}

	/**
	 * Removes the specified PARAMETER object.
	 * @return <code>true</code> if this list contains the object; otherwise,
	 * the method returns <code>false</code>.
	 */
	public boolean removePARAMETER(PARAMETER obj)
	{
		return _objPARAMETER.remove(obj);
	}

	/**
	 * Clears all PARAMETER objects from the list.
	 */
	public void clearPARAMETERList()
	{
		_objPARAMETER.clear();
	}
	/**
	 * Returns an array of LOGINMODULE objects. The length of the returned
	 * array is zero if the list of LOGINMODULE object is empty.
	 */
	public LOGINMODULE[] getLOGINMODULE()
	{
		return (LOGINMODULE[])_objLOGINMODULE.toArray(new LOGINMODULE[0]);
	}

	/**
	 * Replaces all existing LOGINMODULE objects with a new array of
	 * LOGINMODULE objects.
	 * @param objArray	an array of LOGINMODULE objects.
	 */
	public void setLOGINMODULE(LOGINMODULE[] objArray)
	{
		if( objArray == null || objArray.length == 0 )
			this._objLOGINMODULE.clear();
		else
		{
			this._objLOGINMODULE = new ArrayList(Arrays.asList(objArray));
			for( int i=0; i<objArray.length; i++ )
			{
				if( objArray[i] != null )
					objArray[i]._setParent(this);
			}
		}
	}

	/**
	 * Gets the LOGINMODULE object at the specified index.
	 * @param index	index of the returned object.
	 * @throws IndexOutOfBoundsException	if index is out of range.
	 */
	public LOGINMODULE getLOGINMODULE(int index)
	{
		return (LOGINMODULE)_objLOGINMODULE.get(index);
	}

	/**
	 * Replaces an existing LOGINMODULE object at the specified index with
	 * a new LOGINMODULE object.
	 * @param index	index of replaced object.
	 * @throws IndexOutOfBoundsException	if index is out of range.
	 */
	public void setLOGINMODULE(int index, LOGINMODULE obj)
	{
		if( obj == null )
			removeLOGINMODULE(index);
		else
		{
			_objLOGINMODULE.set(index, obj);
			obj._setParent(this);
		}
	}

	/**
	 * Returns the number of LOGINMODULE objects in the list.
	 */
	public int getLOGINMODULECount()
	{
		return _objLOGINMODULE.size();
	}

	/**
	 * Returns <code>true</code> if there is no LOGINMODULE object in the list; otherwise,
	 * the method returns <code>false</code>.
	 */
	public boolean isNoLOGINMODULE()
	{
		return _objLOGINMODULE.size() == 0;
	}

	/**
	 * Returns a read-only list of LOGINMODULE objects.
	 */
	public List getLOGINMODULEList()
	{
		return Collections.unmodifiableList(_objLOGINMODULE);
	}

	/**
	 * Adds a new LOGINMODULE object at the end of the list.
	 * @return <code>true</code> if the new object is added to the list; otherwise,
	 * the method returns <code>false</code>.
	 */
	public boolean addLOGINMODULE(LOGINMODULE obj)
	{
		if( obj==null )
			return false;

		obj._setParent(this);
		return _objLOGINMODULE.add(obj);
	}

	/**
	 * Adds a list of new LOGINMODULE objects at the end of the list.
	 * @return <code>true</code> if the list was changed; otherwise, the method
	 * returns <code>false</code>.
	 */
	public boolean addLOGINMODULE(Collection coLOGINMODULE)
	{
		if( coLOGINMODULE==null )
			return false;

		java.util.Iterator it = coLOGINMODULE.iterator();
		while( it.hasNext() )
		{
			Object obj = it.next();
			if( obj != null && obj instanceof com.borland.xml.toolkit.XmlObject )
				((com.borland.xml.toolkit.XmlObject)obj)._setParent(this);
		}
		return _objLOGINMODULE.addAll(coLOGINMODULE);
	}

	/**
	 * Removes an existing LOGINMODULE object at the specified index.
	 * @return	The removed object.
	 */
	public LOGINMODULE removeLOGINMODULE(int index)
	{
		return (LOGINMODULE)_objLOGINMODULE.remove(index);
	}

	/**
	 * Removes the specified LOGINMODULE object.
	 * @return <code>true</code> if this list contains the object; otherwise,
	 * the method returns <code>false</code>.
	 */
	public boolean removeLOGINMODULE(LOGINMODULE obj)
	{
		return _objLOGINMODULE.remove(obj);
	}

	/**
	 * Clears all LOGINMODULE objects from the list.
	 */
	public void clearLOGINMODULEList()
	{
		_objLOGINMODULE.clear();
	}

	/**
	 * Marshals this object to an element.
	 */
	public com.borland.xml.toolkit.Element marshal()
	{
		com.borland.xml.toolkit.Element elem = new com.borland.xml.toolkit.Element(get_TagName());
		/** Marshals "serverclass" attribute */
		elem.addAttribute(serverclass.marshal());
		/** Marshals a list of PARAMETER objects to elements */
		Iterator it1 = _objPARAMETER.iterator();
		while( it1.hasNext() )
		{
			PARAMETER obj = (PARAMETER)it1.next();
			if( obj != null )
			{
				elem.addComment(obj._marshalCommentList());
				elem.addContent(obj.marshal());
			}
		}
		/** Marshals a list of LOGINMODULE objects to elements */
		Iterator it2 = _objLOGINMODULE.iterator();
		while( it2.hasNext() )
		{
			LOGINMODULE obj = (LOGINMODULE)it2.next();
			if( obj != null )
			{
				elem.addComment(obj._marshalCommentList());
				elem.addContent(obj.marshal());
			}
		}

		elem.addComment(this._marshalBottomCommentList());
		return elem;
	}

	/**
	 * Unmarshals the specified "USERMANAGER" element back to a USERMANAGER object.
	 */
	public static USERMANAGER unmarshal(com.borland.xml.toolkit.Element elem)
	{
		if( elem == null )
			return null;

		USERMANAGER __objUSERMANAGER = new USERMANAGER();
		if( __objUSERMANAGER != null ) //found the element?
		{
			/** Unmarshals "serverclass" attribute */
			__objUSERMANAGER.serverclass.setValue(elem.getAttribute("serverclass"));
		}

		ArrayList __comments = null;
		Iterator it = elem.getChildObjects().iterator();
		while( it.hasNext() )
		{
		    Object __obj = it.next();
			if( __obj instanceof com.borland.xml.toolkit.Comment )
			{
				if( __comments == null )
					__comments = new ArrayList(2);

				__comments.add(__obj);
			}
			else if( __obj instanceof com.borland.xml.toolkit.Element )
			{
				com.borland.xml.toolkit.Element __e = (com.borland.xml.toolkit.Element)__obj;
			    String __name = __e.getName();
			    if( __name.equals(PARAMETER._tagName) )
				{
					/** Unmarshals the child element back to a PARAMETER object */
					PARAMETER __objPARAMETER = PARAMETER.unmarshal(__e);
					__objUSERMANAGER.addPARAMETER(__objPARAMETER);
					__objPARAMETER._unmarshalCommentList(__comments);
				}
			    if( __name.equals(LOGINMODULE._tagName) )
				{
					/** Unmarshals the child element back to a LOGINMODULE object */
					LOGINMODULE __objLOGINMODULE = LOGINMODULE.unmarshal(__e);
					__objUSERMANAGER.addLOGINMODULE(__objLOGINMODULE);
					__objLOGINMODULE._unmarshalCommentList(__comments);
				}

				__comments = null;
			}
		}
		__objUSERMANAGER._unmarshalBottomCommentList(__comments);
		return __objUSERMANAGER;
	}

	/**
	 * Validates this object. If you pass <code>true</code> to this method, it
	 * checks for the first error and stops. On the other hand, if you pass
	 * <code>false</code> to this method, it collects all the errors by
	 * visiting every available elements.
	 * @param firstError	<code>true</code> to exit this method when the first error
	 * is found; <code>false</code> to collect all errors.
	 * @return com.borland.xml.toolkit.ErrorList	A list that contains one or more errors.
	 * @see com.borland.xml.toolkit.XmlObject#validate()
	 * @see com.borland.xml.toolkit.XmlObject#isValid()
	 * @see com.borland.xml.toolkit.ErrorList
	 */
	public com.borland.xml.toolkit.ErrorList validate(boolean firstError)
	{
		com.borland.xml.toolkit.ErrorList errors = new com.borland.xml.toolkit.ErrorList();

		/** PARAMETER is zero or more */
		Iterator it1 = _objPARAMETER.iterator();
		while( it1.hasNext() )
		{
			PARAMETER obj = (PARAMETER)it1.next();
			if( obj != null )
			{
				errors.add(obj.validate(firstError));
				if( firstError && errors.size() > 0 )
					return errors;
			}
		}
		/** LOGINMODULE is zero or more */
		Iterator it2 = _objLOGINMODULE.iterator();
		while( it2.hasNext() )
		{
			LOGINMODULE obj = (LOGINMODULE)it2.next();
			if( obj != null )
			{
				errors.add(obj.validate(firstError));
				if( firstError && errors.size() > 0 )
					return errors;
			}
		}

		return errors.size()==0 ? null : errors;
	}

	/**
	 * Returns a list containing all child elements. Each element in the list is a subclass
	 * of XmlObject.
	 */
	public java.util.List _getChildren()
	{
		java.util.List children = new java.util.ArrayList();
		/** adds _objPARAMETER */
		if( _objPARAMETER != null && _objPARAMETER.size() > 0 )
			children.add(_objPARAMETER);
		/** adds _objLOGINMODULE */
		if( _objLOGINMODULE != null && _objLOGINMODULE.size() > 0 )
			children.add(_objLOGINMODULE);
		return children;
	}


	/**
	 * Gets the element-type name.
	 */
	public String get_TagName()
	{
		return _tagName;
	}
}
