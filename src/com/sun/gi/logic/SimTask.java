/* Generated by Together */

package com.sun.gi.logic;

import java.io.*;
import java.nio.ByteBuffer;

import com.sun.gi.comm.routing.*;
import com.sun.gi.objectstore.*;

/**
 *
 * <p>Title: SimTask</p>
 * <p>Description: This interface defines a class that encapsulates
 * the exection of a Game Logic Manager task</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: Sun Microsystems, TMI</p>
 * @author Jeff Kesselman
 * @version 1.0
 */

public interface SimTask {
  /**
   * Called to transfer the calling thread of control to the execution
   * of the task.
   * 
   */
  public void execute(ObjectStore ostore);

  /**
   * This is a utility call used by other parts of the system.
   * It takes a Game Logic Object (GLO) ID and wraps it in a
   * SORerence.  (An SOReference is a GLO refernce, it has the SO name
   * for historical reasons.)
   *
   * @param id long the GLO id
   * @return SOReference an SO references that may be used by another GLO
   */

  public GLOReference makeReference(long id);

  /**
   * Gets the transaction associated with this SimTask.  A SimTask
   * only has a transaction associated with it during execution.
   * @return Transaction the associated transaction or NULL if the SimTask
   * is not currently executing.
   */
  public Transaction getTransaction();

  // client functions
  // All the functions from here down are used by game application code
  // to talk to its execution context and request services from it.

  /**
   * Returns the applciation ID assigned to the game to which this task belongs.
   * @return long the app ID
   */
  public long getAppID();

  /**
   * This function registers a GLO as a listener to user join/left events
   * The listening GLO must implement the SimUserListener interface.
   * @param ref SOReference A reference to the GLO to be registered.
   */
  public void addUserListener(GLOReference ref);

  /**
   * This function registers a GLO as a listener to data packet arrival
   * events.  It listens for data adressed to the UserID passed.
   *
   * The listening GLO must implement the SimUserDataListener interface.
   *
   * @param id UserID The UserID that data will be adressed to to trigger
   * this listener.
   * @param ref SOReference A reference to the GLO to be registered.
   */

  public void addUserDataListener(UserID id, GLOReference ref);


  /**
   * The game code can call this to send data to users by their IDs.
   * This actually maps to the send call down in the router layer by calling the
   * user manager created to handle this particular game.
   *
   * @param to UserID[]  the list of message recipients.
   * @param from UserID the sender's id (return address)
   * @param bs byte[] the data packet to send.
   */
  public void sendData(ChannelID cid, UserID[]  to, UserID from, ByteBuffer data,
		  boolean reliable);

  

  /**
   * This method is called to create a GLO is the objectstore
   * (the name is historical and shoudl probably be changed.)
   *
   * @param simObject Serializable the GLO to insert into the objects store
   * @param name String an optional symbolic reference to assign to the
   * object, or null.
   * @return SOReference A SOReference that references the newly created GLO
   */
  public GLOReference createSO(Serializable simObject, String name);
  

  // data access functions
  // These functions are used by games to get data from the ObjectStore

  /**
   * Thsi method is used to rertrieve an SOReference based on the symbolic
   * name assigned to the GLO at the time of creation in the objectstore.
   *
   * As is everything else is the obejctstore, symbolic names are specific
   * to a game context.  (The Game's App ID is an implicit part of the key.)
   *
   * @param soName String The symbolic name to look up.
   * @return SOReference A reference to the GLo if found, null if not found.
   */
  public GLOReference findSO(String soName);

}
