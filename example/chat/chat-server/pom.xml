<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- The chat-server module is a standard jar package of chat classes
       used exclusively by the server -->

  <parent>
    <groupId>com.projectdarkstar.example</groupId>
    <artifactId>chat</artifactId>
    <version>0.1-SNAPSHOT</version>
  </parent>

  <groupId>com.projectdarkstar.example</groupId>
  <artifactId>chat-server</artifactId>
  <name>chat-server</name>
  <packaging>jar</packaging>
  <version>0.1-SNAPSHOT</version>


  <dependencies>
    <!-- Compile time dependencies -->
    <dependency>
      <groupId>com.projectdarkstar.server</groupId>
      <artifactId>sgs-server-api</artifactId>
    </dependency>


    <!-- Runtime dependencies -->
    <dependency>
      <groupId>com.projectdarkstar.server</groupId>
      <artifactId>sgs-server</artifactId>
    </dependency>
    <dependency>
      <groupId>berkeleydb</groupId>
      <artifactId>db-binaries</artifactId>
      <type>zip</type>
    </dependency>
  </dependencies>


  <!-- Profiles activated based on platform to set BDB properties
       The profile that is activated sets the bdb.lib.dir to the directory
       name of the bdb libraries in the bdb binary package for the
       platform in use -->
  <profiles>
    <profile>
      <id>macosx-ppc</id>
      <properties>
	<bdb.lib.dir>macosx-ppc</bdb.lib.dir>
      </properties>
      <activation>
	<os>
	  <family>mac</family>
	  <arch>ppc</arch>
	</os>
      </activation>
    </profile>

    <profile>
      <id>macosx-x86</id>
      <properties>
	<bdb.lib.dir>macosx-x86</bdb.lib.dir>
      </properties>
      <activation>
	<os>
	  <family>mac</family>
	  <arch>i386</arch>
	</os>
      </activation>
    </profile>
    
    <profile>
      <id>solaris-x86</id>
      <properties>
	<bdb.lib.dir>solaris-x86</bdb.lib.dir>
      </properties>
      <activation>
	<os>
	  <name>SunOS</name>
	  <arch>x86</arch>
	</os>
      </activation>
    </profile>
    
    <profile>
      <id>solaris-sparc</id>
      <properties>
	<bdb.lib.dir>solaris-sparc</bdb.lib.dir>
      </properties>
      <activation>
	<os>
	  <name>SunOS</name>
	  <arch>sparc</arch>
	</os>
      </activation>
    </profile>
    
    <profile>
      <id>linux-x86</id>
      <properties>
	<bdb.lib.dir>linux-x86</bdb.lib.dir>
      </properties>
      <activation>
	<os>
	  <name>Linux</name>
	  <arch>i386</arch>
	</os>
      </activation>
    </profile>
    
    <profile>
      <id>linux-x86_64</id>
      <properties>
	<bdb.lib.dir>linux-x86_64</bdb.lib.dir>
      </properties>
      <activation>
	<os>
	  <name>Linux</name>
	  <arch>x86_64</arch>
	</os>
      </activation>
    </profile>
    
    <profile>
      <id>win32-x86</id>
      <properties>
	<bdb.lib.dir>win32-x86</bdb.lib.dir>
      </properties>
      <activation>
	<os>
	  <family>windows</family>
	</os>
      </activation>
    </profile>



    <!-- The exec profiles are activated via the command line
	 So to run the single-node-server,
	 one would use the following command:
	 mvn exec:exec -Psingle-node-server -->
    <profile>
      <id>single-node-server</id>
      <build>
	<plugins>
	  <plugin>
	    <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
	    <configuration>
	      <executable>java</executable>
	      <classpathScope>test</classpathScope>
	      <arguments>
		<argument>-Djava.library.path=${run.javapath}</argument>
		<argument>-Djava.util.logging.config.file=${run.logging}</argument>
		<argument>-classpath</argument>
		<classpath/>
		<argument>com.sun.sgs.impl.kernel.Kernel</argument>
		<argument>${run.properties.single}</argument>
	      </arguments>
	    </configuration>
	  </plugin>
	</plugins>
      </build>
    </profile>

    <!-- This exec profile starts up the core of the multi node server
	 mvn exec:exec -Pmulti-node-server-core -->
    <profile>
      <id>multi-node-server-core</id>
      <build>
	<plugins>
	  <plugin>
	    <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
	    <configuration>
	      <executable>java</executable>
	      <classpathScope>test</classpathScope>
	      <arguments>
		<argument>-Djava.library.path=${run.javapath}</argument>
		<argument>-Djava.util.logging.config.file=${run.logging}</argument>
		<argument>-classpath</argument>
		<classpath/>
		<argument>com.sun.sgs.impl.kernel.Kernel</argument>
		<argument>${run.properties.multi.core}</argument>
	      </arguments>
	    </configuration>
	  </plugin>
	</plugins>
      </build>
    </profile>

    <!-- This exec profile starts up an app node of the multi node server
	 mvn exec:exec -Pmulti-node-server-app -->
    <profile>
      <id>multi-node-server-app</id>
      <build>
	<plugins>
	  <plugin>
	    <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
	    <configuration>
	      <executable>java</executable>
	      <classpathScope>test</classpathScope>
	      <arguments>
		<argument>-Djava.library.path=${run.javapath}</argument>
		<argument>-Djava.util.logging.config.file=${run.logging}</argument>
		<argument>-classpath</argument>
		<classpath/>
		<argument>com.sun.sgs.impl.kernel.Kernel</argument>
		<argument>${run.properties.multi.app}</argument>
	      </arguments>
	    </configuration>
	  </plugin>
	</plugins>
      </build>
    </profile>



  </profiles>



  <build>
    <plugins>

      <!-- The berkeleydb binary package must be retrieved and unpacked
	   Before the test phase so that they are available during
	   runtime of the unit tests and other executions-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-db-binaries</id>
            <phase>process-resources</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>berkeleydb</groupId>
                  <artifactId>db-binaries</artifactId>
		  <type>zip</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>${project.build.directory}/</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      
      <!-- Simple ant task to make the datastore directory 
	   if the user wishes to run the server -->
      <plugin>
          <artifactId>maven-antrun-plugin</artifactId>
          <executions>
              <execution>
                  <id>make-datastore</id>
                  <phase>generate-resources</phase>
                  <configuration>
                      <tasks>
                          <mkdir dir="${project.build.directory}/dsdb/"/>
                      </tasks>
                  </configuration>
                  <goals>
                      <goal>run</goal>
                  </goals>
              </execution>
          </executions>
      </plugin>



    </plugins>
  </build>


  <properties>
    <run.javapath>${project.build.directory}/bdb-${bdb.version}/${bdb.lib.dir}/</run.javapath>
    <run.logging>${basedir}/src/test/properties/logging.properties</run.logging>
    <run.properties.single>src/test/properties/ChatSingle.properties</run.properties.single>
    <run.properties.multi.core>src/test/properties/ChatCore.properties</run.properties.multi.core>
    <run.properties.multi.app>src/test/properties/ChatApp.properties</run.properties.multi.app>

  </properties>


</project>
