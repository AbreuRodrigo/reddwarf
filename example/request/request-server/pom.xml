<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- The chat-server module is a standard jar package of chat classes
       used exclusively by the server -->

  <parent>
    <groupId>com.projectdarkstar.example.request</groupId>
    <artifactId>request</artifactId>
    <version>0.1-SNAPSHOT</version>
  </parent>

  <artifactId>request-server</artifactId>
  <name>Request Example Server</name>
  <packaging>jar</packaging>


  <dependencies>
    <!-- Compile time dependencies -->
    <dependency>
      <groupId>com.projectdarkstar.server</groupId>
      <artifactId>sgs-server-api</artifactId>
    </dependency>


    <!-- Runtime dependencies -->
    <dependency>
      <groupId>com.projectdarkstar.server</groupId>
      <artifactId>sgs-server</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.projectdarkstar.ext.berkeleydb</groupId>
      <artifactId>db-binaries</artifactId>
      <type>zip</type>
    </dependency>
  </dependencies>

  <!-- Profiles setup to execute the server out of the lifecycle
       These profiles should be enabled when running the antrun plugin
       to execute the app:
       i.e. mvn generate-test-resources antrun:run -Psingle-node-server
       so that the correct binaries are in place -->
  <profiles>

    <profile>
      <id>single-node-server</id>
      <properties>
	<run.properties>${run.properties.single}</run.properties>
      </properties>
    </profile>

    <profile>
      <id>multi-node-server-core</id>
      <properties>
	<run.properties>${run.properties.multi.core}</run.properties>
      </properties>
    </profile>

    <profile>
      <id>multi-node-server-app</id>
      <properties>
	<run.properties>${run.properties.multi.app}</run.properties>
      </properties>
    </profile>


    <!-- In order to enable the netbeans profiler, this profile must
	 be activated.
	 This needs to be reworked slightly so that it is platform
	 and machine independent -->
    <profile>
      <id>netbeans-profiler</id>
      <properties>
	<run.jvm.args.profile>-agentpath:/opt/netbeans-6.1/profiler3/lib/deployed/jdk15/linux/libprofilerinterface.so=/opt/netbeans-6.1/profiler3/lib,5140</run.jvm.args.profile>
      </properties>
    </profile>



  </profiles>



  <build>
    <plugins>

      <!-- The berkeleydb binary package must be retrieved and unpacked
	   Before the test phase so that they are available during
	   runtime of the unit tests and other executions-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-bdb-binaries</id>
          </execution>
        </executions>
      </plugin>

      <!-- The antrun plugin is configured to run the app outside
	   of the build lifecycle via the command line.
	   However, the lifecycle must be run up through the generate-test-resources
	   phase for the necessary items to be in place for the app to run.
	   In order to run, use the following command:
	   mvn generate-test-resources antrun:run -->
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
	<configuration>
	  <tasks>
	    <java classname="com.sun.sgs.impl.kernel.Kernel"
		  fork="true">
	      <jvmarg line="${run.jvm.args}"/>
	      <jvmarg line="${run.jvm.args.profile}"/>
	      <sysproperty key="java.library.path" 
			   file="${run.javapath}"/>
	      <sysproperty key="java.util.logging.config.file"
			   file="${run.logging}"/>
	      <sysproperty key="com.sun.sgs.impl.service.data.store.db.environment.class"
			   value="${run.bdb.env}"/>
	      <classpath>
		<path refid="maven.test.classpath"/>
	      </classpath>
	      <arg value="${run.properties}"/>
	    </java>
	  </tasks>
	</configuration>

	<!-- Builds the directories necessary for running the app
	     with the antrun configuration above.  Runs in the
	     generate-test-resources phase -->
	<executions>
          <execution>
            <id>make-datastore</id>
            <phase>generate-test-resources</phase>
            <configuration>
              <tasks>
		<delete dir="${project.build.directory}/dsdb/"/>
                <mkdir dir="${project.build.directory}/dsdb/"/>
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>


  <properties>
    <run.jvm.args></run.jvm.args>
    <run.jvm.args.profile></run.jvm.args.profile>

    <run.logging>${basedir}/src/test/properties/logging.properties</run.logging>
    <run.properties.single>src/test/properties/RequestSingle.properties</run.properties.single>
    <run.properties.multi.core>src/test/properties/RequestCore.properties</run.properties.multi.core>
    <run.properties.multi.app>src/test/properties/RequestApp.properties</run.properties.multi.app>

  </properties>


</project>
