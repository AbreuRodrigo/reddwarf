This is the EA2 release of the Project Darkstar Sun Game Server SDK.

A key change is that there is no DiscoveryManager to run anymore.  The DiscoveryManager functionality of generating the discovery.xml has been integrated directly into the main SGS process.

Accordingly FakeDiscovery.xml is no longer included in the destribution and all the sample apps have been modified to use "discovery.xml". 

This version also elimiates the dependancy on LRMP as LRMp was judged too unstable and eliminating it removed a number of SGS bugs.

Also new in this release is a basic Management Console, useful for starting and stopping game applications without shutting down the entire server.  For details on how to enable and use it, please refer to docs/guides/ManagementConsole.pdf

DIRECTORIES:

The apps directory contains the deployments of the sample server applications
The SGS-apps.conf file controls which are started by the server on boot. (See
that file's comments for more information.)

The lib directory contains external librarys that the SGS depends on.

The client directory contains the clients sides of the sample apps.

Next to each sample jar "Foo.jar" in the same directory is another jar "FooSrc.jar" that contains the Java source code for each example.

The server itself is in SunGameServer.jar.  The file startSGS.sh shows how to start the server with logging enabled and controlled by the logging.properties file.  Look in logging.properties to see the settable logging options.

SGSClient.jar is the J2SE client API. You may need to enable error logging in your applcication as well as the current API logs exceptions during callbacks and without logging these will be hidden.  You can enable logging by putting -Djava.util.logging.config.file=<logging.properties> on your java command line for your app.  <logging.properties> should be a copy of the destributed logging.properties file customized for your app.

The SunGameServerJMEClient.jad and SunGameServerClient.jar files are the J2ME client API. startSGSWithJME.bat will start the game server with JME support enabled.  Refer to the JME Chat Test demo (bin/startJMEChatTest.bat) for a sample JME application.  In fact, running the JME demo along side the JSE Chat Test demo will demonstrate two hybrid clients talking to the same game application.

The DarkstarW32CPPAPI.zip file contains the Win32 CPP API.

For the latest information please see the forums linked off the project darkstar home page at www.projectdarkstar.com

Jeff Kesselman
Chief Darkstar Architect
