<?xml version="1.0" encoding="UTF-8"?>
<project name="DarkstarJMEClient" default="jar" basedir="." >

    <property name="output.name" value="DarkstarJMEClient"/>
    <property name="libs.j2me_ant_ext.classpath" value="lib/org-netbeans-modules-kjava-antext.jar"/>
    <property name="libs.KXML.classpath" value="lib/kxml2-min-2.2.2.jar"/>
    <!-- Change this property to point to your installation of the Wireless toolkit 2.2 -->
    <property name="platform.home" value="${user.home}/WTK2.2"/>
    <property name="platforms.J2ME_Wireless_Toolkit_2_2.home" value="${user.home}/WTK2.2"/>
    <property name="platforms.J2ME_Wireless_Toolkit_2_2.type" value="UEI-1.0.1"/>
    <property name="platform.bootclasspath" value="${platform.home}/lib/wma20.jar:${platform.home}/lib/jsr082.jar:${platform.home}/lib/jsr184.jar:${platform.home}/lib/j2me-ws.jar:${platform.home}/lib/mmapi.jar:${platform.home}/lib/jsr75.jar:${platform.home}/lib/cldcapi11.jar:${platform.home}/lib/midpapi20.jar"/>
    <property name="platform.type" value="UEI-1.0"/>
    <property name="platform.device" value=""/>
    <!-- valid values are 0 (no obfuscation) to 9, for production build set this to 8 -->
    <property name="obfuscation.level" value="0"/>
    <property name="obfuscator.classpath" value="lib/proguard.jar"/>
    <property name="sign.enabled" value="false"/>
    <property name="dist.jad.url" value="file://"/>
    <property name="javac.source" value="1.3"/>
    <property name="javac.target" value="1.1"/>
    <property name="javac.optimize" value="false"/>
    <property name="build.dir" value="build"/>
    <property name="src.dir" value="src"/>
    <property name="dist.dir" value="dist"/>
    <property name="preprocessed.dir" value="${build.dir}/preprocessed"/>
    <property name="platform.configuration" value="CLDC-1.1"/>
    <property name="preverify.classes.dir" value="${build.dir}/preverified"/>
    <property name="obfuscated.classes.dir" value="${build.dir}/obfuscated"/>
    <property name="build.classes.dir" value="${build.dir}/compiled"/>
    <property name="obfuscator.srcjar" value="${build.dir}/before-obfuscation.jar"/>
    <property name="obfuscator.destjar" value="${build.dir}/obfuscated.jar"/>
    <property name="dist.jar" value="${output.name}.jar"/>
    <property name="dist.jad" value="${output.name}.jad"/>
    <property name="manifest.midlets" value=""/>
    <property name="manifest.midlet.vendor" value="MIDlet-Vendor: Sun Microsystems"/>
    <property name="manifest.midlet.version" value="MIDlet-Version: 1.0"/>
    <property name="manifest.midlet.name" value="MIDlet-Name: DarkstarJMEClient"/>
    <property name="manifest.pushregistry" value=""/>
    <property name="manifest.apipermissions" value=""/>
    <property name="javac.encoding" value="Cp1252"/>
    <property name="jar.compress" value="true"/>
    
    <target name="init" depends="load-properties">
        
        <path id="project.classpath">
            <pathelement location="${libs.KXML.classpath}"/>            
        </path>
        <taskdef resource="org/netbeans/modules/kjava/antext/defs.properties">
            <classpath>
                <pathelement path="${libs.j2me_ant_ext.classpath}"/>
            </classpath>
        </taskdef>
        

    </target>
    
    <target name="load-properties">
        <loadproperties srcfile="midlet.properties"></loadproperties>
    </target>
    
    <target name="extract-libs">
        <unzip src="${libs.KXML.classpath}" dest="${build.classes.dir}">
            <patternset>
                <include name="**/*.class"/>
                <exclude name="**/*.jad"/>          
            </patternset>
        </unzip>     
    </target>
    
    <target name="compile" depends="init,extract-libs" description="Compile project classes.">
        <mkdir dir="${build.classes.dir}"/>
        <javac includeantruntime="false" source="${javac.source}" target="${javac.target}" deprecation="${javac.deprecation}" optimize="${javac.optimize}" debug="${javac.debug}" destdir="${build.classes.dir}" srcdir="${src.dir}" bootclasspath="${platform.bootclasspath}" >
            <classpath>
                <path path="${libs.KXML.classpath}"/>
            </classpath>
        </javac>        
    </target>
    
    
    <target name="create-jad" depends="init">
        <mkdir dir="${build.dir}"/>
        <dirname file="${dist.dir}/${dist.jad}" property="dist.jad.dir"/>
        <mkdir dir="${dist.jad.dir}"/>
        <condition property="evaluated.manifest.apipermissions" value="${manifest.apipermissions}">
            <not>
                <equals arg1="${platform.profile}" arg2="MIDP-1.0"/>
            </not>
        </condition>
        <condition property="evaluated.manifest.pushregistry" value="${manifest.pushregistry}">
            <not>
                <equals arg1="${platform.profile}" arg2="MIDP-1.0"/>
            </not>
        </condition>
        <condition property="contains.manifest.configuration">
            <contains substring="MicroEdition-Configuration: " string="${manifest.others}"/>
        </condition>
        <condition property="contains.manifest.profile">
            <contains substring="MicroEdition-Profile: " string="${manifest.others}"/>
        </condition>
        <property value="" name="evaluated.manifest.apipermissions"/>
        <property value="" name="evaluated.manifest.pushregistry"/>
        <property name="manifest.jad" value=""/>
        <property name="manifest.manifest" value=""/>
        <nb-output file="${dist.dir}/${dist.jad}" encoding="UTF-8">${manifest.midlets}${evaluated.manifest.apipermissions}${evaluated.manifest.pushregistry}${manifest.others}${manifest.jad}</nb-output> 
        <nb-output file="${build.dir}/manifest.mf" encoding="UTF-8">${manifest.midlets}${evaluated.manifest.apipermissions}${evaluated.manifest.pushregistry}${manifest.others}${manifest.manifest}</nb-output> 
        
    </target>
    
    <target name="obfuscate-check" depends="init,compile" description="Up-to-date check before obfuscation.">
        <uptodate property="no.obfusc" targetfile="${obfuscator.destjar}">
            <srcfiles dir="${build.classes.dir}"/>
        </uptodate>
    </target>
    
    <target name="obfuscate" depends="init,compile,obfuscate-check" description="Obfuscate project classes." unless="no.obfusc">
        <dirname file="${obfuscator.srcjar}" property="obfuscator.srcjar.dir"/>
        <dirname file="${obfuscator.destjar}" property="obfuscator.destjar.dir"/>
        <mkdir dir="${obfuscator.srcjar.dir}"/>
        <mkdir dir="${obfuscator.destjar.dir}"/>
        <jar jarfile="${obfuscator.srcjar}" basedir="${build.classes.dir}"/>
        <property name="obfuscation.custom" value=""/>
        <nb-obfuscate srcjar="${obfuscator.srcjar}" destjar="${obfuscator.destjar}" obfuscatorclasspath="${obfuscator.classpath}" classpath="${platform.bootclasspath}:${libs.KXML.classpath}" obfuscationLevel="${obfuscation.level}" extraScript="${obfuscation.custom}"/>
        <mkdir dir="${obfuscated.classes.dir}"/>
        <unjar src="${obfuscator.destjar}" dest="${obfuscated.classes.dir}"/>
    </target>
    
    <target name="preverify" depends="init,compile,obfuscate" description="Preverify project classes.">
        <mkdir dir="${preverify.classes.dir}"/>
        <echo message="${platform.bootclasspath}"></echo>
        <nb-preverify srcdir="${obfuscated.classes.dir}" destdir="${preverify.classes.dir}" classpath="${platform.bootclasspath}" configuration="${platform.configuration}" platformhome="${platform.home}" platformtype="${platform.type}" commandline="${platform.preverifycommandline}"/>        
    </target>
    
    <target name="set-keystore-password" depends="init" if="netbeans.home" unless="skip-sign-keystore-password-input">
        <nb-enter-password keystore="${sign.keystore}" passwordproperty="sign.keystore.password"/>
    </target>
    <target name="set-alias-password" depends="init" if="netbeans.home" unless="skip-sign-alias-password-input">
        <nb-enter-password keystore="${sign.keystore}" keyalias="${sign.alias}" passwordproperty="sign.alias.password"/>
    </target>
    
    <target name="jar" depends="init,preverify,create-jad,set-keystore-password,set-alias-password" description="Build jar and application descriptor.">
        <dirname file="${dist.dir}/${dist.jar}" property="dist.jar.dir"/>
        <mkdir dir="${dist.jar.dir}"/>
        <jar compress="${jar.compress}" jarfile="${dist.dir}/${dist.jar}" manifest="${build.dir}/manifest.mf" manifestencoding="UTF-8">
            <fileset dir="${preverify.classes.dir}"/>
            <fileset dir="${obfuscated.classes.dir}">
                <exclude name="**/*.class"/>
            </fileset>
        </jar>
        <nb-jad jadfile="${dist.dir}/${dist.jad}" jarfile="${dist.dir}/${dist.jar}" url="${dist.jar}" sign="${sign.enabled}" keystore="${sign.keystore}" keystorepassword="${sign.keystore.password}" alias="${sign.alias}" aliaspassword="${sign.alias.password}" encoding="${javac.encoding}"/>
    </target>
    
    <target name="rebuild" depends="init,clean,jar" description="Rebuild the application."/>
    <target name="run" depends="init,jar" description="Run MIDlet suite.">
        <nb-run jadfile="${dist.dir}/${dist.jad}" jarfile="${dist.dir}/${dist.jar}" jadurl="${dist.jad.url}" device="${platform.device}" platformhome="${platform.home}" platformtype="${platform.type}" execmethod="${run.method}" securitydomain="${evaluated.run.security.domain}" commandline="${platform.runcommandline}" classpath="${platform.bootclasspath}:${dist.dir}/${dist.jar}" cmdoptions="${run.cmd.options}"/>
    </target>
    <target name="run-no-build" depends="init" description="Quick Run already built MIDlet suite.">
        <nb-run jadfile="${dist.dir}/${dist.jad}" jarfile="${dist.dir}/${dist.jar}" jadurl="${dist.jad.url}" device="${platform.device}" platformhome="${platform.home}" platformtype="${platform.type}" execmethod="${run.method}" securitydomain="${evaluated.run.security.domain}" commandline="${platform.runcommandline}" classpath="${platform.bootclasspath}:${dist.dir}/${dist.jar}" cmdoptions="${run.cmd.options}"/>
    </target>
    
    <target name="javadoc" depends="init">
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc source="${javac.source}" destdir="${dist.javadoc.dir}" bootclasspath="${platform.bootclasspath}" notree="${javadoc.notree}" use="${javadoc.use}" nonavbar="${javadoc.nonavbar}" noindex="${javadoc.noindex}" splitindex="${javadoc.splitindex}" author="${javadoc.author}" version="${javadoc.version}" windowtitle="${javadoc.windowtitle}" private="${javadoc.private}">
            <classpath>
                <path path="${libs.classpath}"/>
            </classpath>
            <sourcepath>
                <pathelement location="${preprocessed.dir}"/>
            </sourcepath>
            <fileset dir="${preprocessed.dir}"/>
        </javadoc>
        <antcall target="browse-javadoc"/>
    </target>
    <target name="clean" depends="init" description="Clean build products.">
        <antcall target="do-clean" inheritall="true" inheritrefs="true"/>
    </target>
    
    <target name="do-clean">
        <delete dir="${preprocessed.dir}"/>
        <delete dir="${build.classes.dir}"/>
        <delete file="${obfuscator.srcjar}"/>
        <delete file="${obfuscator.destjar}"/>
        <delete dir="${obfuscated.classes.dir}"/>
        <delete dir="${preverify.classes.dir}"/>
        <delete file="${build.dir}/manifest.mf"/>
        <delete file="${dist.dir}/${dist.jar}"/>
        <delete file="${dist.dir}/${dist.jad}"/>
        <delete dir="${dist.javadoc.dir}"/>
    </target>

    
</project>
